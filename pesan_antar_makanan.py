# -*- coding: utf-8 -*-
"""Pesan-Antar-Makanan

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aseWwlE9YEZBh6CGTXJ38FEPVIOm0pl4

Import Library
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import plotly.express as px
# %matplotlib inline
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense, LSTM

Import Dataset

url = 'https://raw.githubusercontent.com/ataislucky/Data-Science/main/dataset/food_delivery.txt'
data = pd.read_csv(url)
data.sample(5)

data.info()

Memeriksa Missing Value pada Dataset

data.isnull().sum()

Mencari jarak antara 2 lokasi secara geografik menggunakan rumus Haversine

R = 6371  #Jari-jari bumi (dalam km)

def deg_to_rad(degrees):
    return degrees * (np.pi/180)

# Rumus Haversine
def distcalculate(lat1, lon1, lat2, lon2):
    d_lat = deg_to_rad(lat2-lat1)
    d_lon = deg_to_rad(lon2-lon1)
    a1 = np.sin(d_lat/2)**2 + np.cos(deg_to_rad(lat1))
    a2 = np.cos(deg_to_rad(lat2)) * np.sin(d_lon/2)**2
    a = a1 * a2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))
    return R * c

# Membuat kolom jarak & menghitung jarak
data['distance'] = np.nan

for i in range(len(data)):
  data.loc[i, 'distance'] = distcalculate(data.loc[i, 'Restaurant_latitude'],
                                          data.loc[i, 'Restaurant_longitude'],
                                          data.loc[i, 'Delivery_location_latitude'],
                                          data.loc[i, 'Delivery_location_longitude'])

data["distance"].head()

"""Analisis Jarak terdahap Waktu Pesan-Antar"""

figure = px.scatter(data_frame = data,
                    x="distance",
                    y="Time_taken(min)",
                    size="Time_taken(min)",
                    trendline="ols",
                    title = "Hubungan Antara Jarak dan Waktu Pesan-Antar Makanan")
figure.show()

"""Analisis Umur kurir terdahap Waktu Pesan-Antar"""

figure = px.scatter(data_frame = data,
                    x="Delivery_person_Age",
                    y="Time_taken(min)",
                    size="Time_taken(min)",
                    color = "distance",
                    trendline="ols",
                    title = "Hubungan Antara Umur Kurir dan Waktu Pesan-Antar Makanan")
figure.show()

"""Analisis Ratings Kurir terdahap Waktu Pesan-Antar"""

figure = px.scatter(data_frame = data,
                    x="Delivery_person_Ratings",
                    y="Time_taken(min)",
                    size="Time_taken(min)",
                    color = "distance",
                    trendline="ols",
                    title = "Hubungan Antara Ratings Kurir dan Waktu Pesan-Antar Makanan")
figure.show()

"""Analisis Jenis Kendaraan terdahap Waktu Pesan-Antar"""

fig = px.box(data,
             x="Type_of_vehicle",
             y="Time_taken(min)",
             color="Type_of_order",
             title = "Hubungan Antara Jenis Kendaraan dan Waktu Pesan-Antar Makanan")
fig.show()

"""#Modelling"""

x = np.array(data[["Delivery_person_Age",
                   "Delivery_person_Ratings",
                   "distance"]])
y = np.array(data[["Time_taken(min)"]])
xtrain, xtest, ytrain, ytest = train_test_split(x, y,
                                                test_size=0.20,
                                                random_state=33)

model = Sequential()
model.add(LSTM(128, return_sequences=True, input_shape= (xtrain.shape[1], 1)))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))
model.summary()

"""Training Model"""

model.compile(loss='mse', optimizer='adam', metrics=['mse'])
history = model.fit(xtrain, ytrain, batch_size=1, epochs=9)

"""Plot Metrik"""

# plot metrics
plt.plot(history.history['mse'])
plt.show()

"""Menguji Kinerja Model"""

print("`Prediksi Waktu Pesan-Antar Makanan")
a = int(input("Delivery Partner Age: "))
b = float(input("Previous Delivery Ratings: "))
c = int(input("Total Distance: "))

features = np.array([[a, b, c]])
print("Delivery Time Prediction in Minutes = ", model.predict(features))